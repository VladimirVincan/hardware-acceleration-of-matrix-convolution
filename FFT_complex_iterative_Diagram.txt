@startuml

start

partition Initialization {
  :topRE_o <= 0
  tomIM_o <= 0
  bottomRE_o <= 0
  bottomIM_o <= 0
  ready <= 0]
}
repeat
  partition idle {
    repeat
      :ready <= 1]
    repeat while (start = 1) is (false)
    -> true;
    :i <- 0]
  }

  repeat
    partition l1 {
      :m <- 1 << (i+1)
      m2 <- 1 << i
      j <- 0]
    }

    repeat
      partition l2 {
        :k_next <= 0
        k <- j]
      }
       
      repeat
        partition l3 {
          partition addr_read1_l3 {
            :data_i_addr_o <= k]
          }
          partition read1_l3 {
            :topRE_i <= dataRE_i_data_i
            topIM_i <= dataIM_i_data_i]
          }
          partition addr_read2_l3 {
            :data_i_addr_o <= k+m2]
          }
          partition read2_l3 {
            :bottomRE_i <= dataRE_i_data_i
            bottomIM_i <= dataIM_i_data_i]
          }
          partition start_butterfly {
            repeat
            repeat while (butterfly_ready) is (0)
            -> 1;
            :butterfly_start <= 1]
          }
          partition working_butterfly {
            repeat
            repeat while (butterfly_ready) is (1)
            -> 0;
            :butterfly_start <= 0]
          }
          partition ready_butterfly {
            repeat
            repeat while (butterfly_ready) is (0)
            -> 1;
          }
          partition addr_write1_l3 {
            :data_o_addr_o <= k]
          }
          partition write1_l3 {
            :dataRE_o_data_o <= topRE_o
            dataIM_o_data_o <= topIM_o]
          }
          partition addr_write2_l3 {
            :data_o_addr_o <= k + m2]
          }
          partition write2_l3 {
            :dataRE_o_data_o <= bottomRE_o
            dataIM_o_data_o <= bottomIM_o]
          }
          :k_next <= k + m
          k <- k_next]
        }
      repeat while (k == size) is (false)
      ->true;
      :j_next <= j + 1
      j <- j_next
    repeat while (j == m2) is (false)
    ->true;
    :i_next <= i + 1
    i <- i_next]
  repeat while (i == log2size) is (false)
  ->true;
repeat while () detach

@enduml
